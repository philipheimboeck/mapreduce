@startuml

skinparam monochrome true
'skinparam style strictuml
skinparam linetype polyline
skinparam class {
    FontSize 13
    attribute {
        FontSize 12
    }
}

package DEF-MapReduce {
    namespace at.phe.def.mapreduce {

        namespace base {
            abstract class MapJavaBaseLibraryFunction<Key, Value> {
                #result : JsonArray
                +run(parameters : List<String>) : void
                #emit(key : Key, value : Value) : void
                #{abstract} runMap(parameters : List<String>) : void
            }

            abstract class ReduceJavaBaseLibraryFunction<Key, Value, KeyOut, ValueOut> {
                #result : JsonArray
                +ReduceJavaBaseLibraryFunction(keyClass : Class<Key>, valueClass : Class<Value>)
                +run(parameters : List<String>) : void
                #emit(key : KeyOut, value : ValueOut) : void
                #{abstract} runReduce(key : Key, values : Collection<Value>) : void
            }

            abstract class PartitionerJavaBaseLibraryFunction {
                #numberPartitions : int
                +run(parameters : List<String>) : void
                #partition(value : JsonArray) : List<JsonArray>
                #writePartition(partition : JsonArray) : String
            }

            abstract class JavaBaseLibraryFunction {
                +run() : void
                +{abstract} run(parameters : List<String>) : void
            }

            JavaBaseLibraryFunction <|-- MapJavaBaseLibraryFunction
            JavaBaseLibraryFunction <|-- ReduceJavaBaseLibraryFunction
            JavaBaseLibraryFunction <|-- PartitionerJavaBaseLibraryFunction
        }

        namespace demo {
            namespace storyteller {
                class StoryTeller {
                    -getRandomSentence() : String
                    +run(parameters : List<String>) : void
                }
                at.phe.def.mapreduce.base.JavaBaseLibraryFunction <|-- StoryTeller
            }

            namespace wordcount {
                class WordCountMap<JsonPrimitive, JsonPrimitive> {
                    #runMap(parameters : List<String>) : void
                }
                class WordCountReducer<String, Integer, String, Integer> {
                    #runReduce(key : String, integers : Collection<Integer>) : void
                }

                at.phe.def.mapreduce.base.MapJavaBaseLibraryFunction <|-- WordCountMap
                at.phe.def.mapreduce.base.ReduceJavaBaseLibraryFunction <|-- WordCountReducer
            }
        }

        namespace partitioner {
            interface IPartitioner {
                partition(key : Object, nrPartitions : int) : int
            }
            class HashPartitioner

            IPartitioner <|-- HashPartitioner
        }

        class TuplePartitioner {
            #numberReducers : int
            #partitions : List<JsonArray>
            +TuplePartitioner(partitioner : IPartitioner, numberReducers : int)
            +partition(input : JsonArray) : void
            +getPartitions() : List<JsonArray>
        }

        at.phe.def.mapreduce.base.PartitionerJavaBaseLibraryFunction --> at.phe.def.mapreduce.partitioner.IPartitioner
        at.phe.def.mapreduce.base.PartitionerJavaBaseLibraryFunction ..> TuplePartitioner : creates

        at.phe.def.mapreduce.partitioner.IPartitioner <- TuplePartitioner : partitioner


    }
}

newpage
skinparam monochrome true
'skinparam style strictuml
skinparam linetype polyline
skinparam class {
    FontSize 13
    attribute {
        FontSize 12
    }
}

package DEF-Commons {
    namespace at.enfilo.def.prototype1.commons {
        class PersistenceHandler {
            + {abstract} writeResource(pId : String, jId : String, key : String, value : String) : void
            + {abstract} readResource(pId : String, jId : String, key : String) : String
        }

        namespace remote {
            class TaskDTO {
                -programId : String
                -jobId : String
                -libFunctionId : String
                -id : String
                -inParameters : List<String>
            }
        }
    }
}


package DEF-WorkerAPI {
    namespace at.enfilo.def.prototype1.workerapiÂ {
        abstract class JavaBaseLibraryFunction {
            #inParameters : List<String>
            +getResult() : String
            +{abstract} run() : void
            +{static} main(args : String[]) : void
            #setResult(result : <T>)
            #writeJobResource(value : <T>, resource : String) : void
        }

        at.enfilo.def.prototype1.commons.PersistenceHandler <- JavaBaseLibraryFunction : persistenceHandler
    }
}

package DEF-MapReduce {
    namespace at.phe.def.mapreduce {

        namespace base {

            abstract class JavaBaseLibraryFunction {
                +run() : void
                +{abstract} run(parameters : List<String>) : void
            }

            at.enfilo.def.prototype1.workerapi.JavaBaseLibraryFunction <|-- JavaBaseLibraryFunction
        }


        class MapTaskDTO {
        }


        at.enfilo.def.prototype1.commons.PersistenceHandler <-- MapTaskCallable : persistenceHandler

        at.enfilo.def.prototype1.commons.remote.TaskDTO <- MapTaskDTO : appTask
        at.enfilo.def.prototype1.commons.remote.TaskDTO <- MapTaskDTO : mapTask
        at.enfilo.def.prototype1.commons.remote.TaskDTO <- MapTaskDTO : combinerTask
        at.enfilo.def.prototype1.commons.remote.TaskDTO <- MapTaskDTO : partitionTask
        MapTaskDTO <- MapTaskCallable : task

    }
}


@enduml