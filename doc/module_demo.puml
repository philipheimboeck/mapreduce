@startuml

skinparam monochrome true
'skinparam style strictuml
skinparam linetype polyline

'page 1x2

package DEF-Domain {
    namespace at.enfilo.def.prototype1.domain {
        class Task

        class LibraryFunction {
            - id : String
            - stdoutParameter : FormalParameter
            - name : String
            - pse : PSE
            - path : String
            - pseCallOption : String
            - version : String
            - versionDate : LocalDate
            - description : String
            - inParameters : List<FormalParameter>
            - outParameters : List<FormalParameter>
            - returnParameter : FormalParameter
        }
        class Program
        class Job
        class MapReduceInfo {
            - int numberReducers
        }
        LibraryFunction <-- MapReduceInfo : mapLibrary
        LibraryFunction <-- MapReduceInfo : reduceLibrary
        Job -> Program
        Job --> MapReduceInfo : mapReduceInfo
        class Task

        Task -> Job
        Task --> LibraryFunction : library
    }

    namespace at.enfilo.def.prototype1.factory {
        interface ITaskFactory {
            createTask() : Task
        }
        class TaskFactory {
            + TaskFactory(resourceManager : IResourceManager)
        }
        ITaskFactory <|- TaskFactory

        ITaskFactory .> at.enfilo.def.prototype1.domain.Task : creates
    }
}

newpage
skinparam monochrome true
'skinparam style strictuml
skinparam linetype polyline

class ExecutorService {
    +invokeAll(callables : Collection<ICallable>)
}

interface ICallable {
    +call()
}

package DEF-WorkerModule {

    namespace at.enfilo.def.prototype1.workermodule {
        class DispatcherClient {
            +runTask(task : TaskDTO) : TaskResult
        }
    }
}

package DEF-MapReduce {
    namespace at.phe.def.mapreduce {

        class MapTaskCallable<TaskResult>
        class TaskCallable<TaskResult>

        class MapTaskDTO {
            -id : String
            -appTask : TaskDTO
            -mapTask : TaskDTO
            -numberPartitions : int
        }

        class PartitionHelper {
            +{static} getPartitionReferences() : List<String>
        }

        .ICallable <|-- MapTaskCallable
        .ICallable <|-- TaskCallable


        at.enfilo.def.prototype1.workermodule.DispatcherClient <-- MapTaskCallable : dispatcher

        MapTaskDTO <- MapTaskCallable : task

        at.enfilo.def.prototype1.workermodule.DispatcherClient <-- TaskCallable : dispatcher
        at.enfilo.def.prototype1.domain.Task <- TaskCallable : task
    }
}

package DEF-Dispatcher {
    namespace at.enfilo.def.prototype1.dispatcher {

        interface IJobDispatcher {
            +submitJob() : JobState
            +terminateJob() : void
            +restartJob() : Job
            +attachTask() : void
        }

        class ThreadJobDispatcher {
            - runNormalTasks() : JobState
            - runMapReduceTasks() : JobState
            - createMapTaskDTO() : MapTaskDTO
            - createReduceTask() : Task
        }
        IJobDispatcher <|-- ThreadJobDispatcher
        ThreadJobDispatcher -> at.enfilo.def.prototype1.factory.ITaskFactory
        .ExecutorService <- ThreadJobDispatcher : executorService
        ThreadJobDispatcher ..> at.phe.def.mapreduce.MapTaskDTO : creates
        ThreadJobDispatcher ..> at.phe.def.mapreduce.TaskCallable : creates
        ThreadJobDispatcher ..> at.phe.def.mapreduce.MapTaskCallable : creates
        ThreadJobDispatcher -> at.phe.def.mapreduce.PartitionHelper : partitionHelper

        class JPPFAdapter
        IJobDispatcher <|-- JPPFAdapter

        class JobDispatcherFactory {
            +{static} createJobDispatcher() : IJobDispatcher
        }

        JobDispatcherFactory ..> ThreadJobDispatcher : creates
        JobDispatcherFactory ..> JPPFAdapter : creates
    }
}

package DEF-Demo {
    namespace at.phe.def.mapreduce.demo {
        class MapReduceMain {
            +main()
        }

        MapReduceMain -> at.enfilo.def.prototype1.dispatcher.IJobDispatcher : dispatcher
        MapReduceMain -> at.enfilo.def.prototype1.domain.LibraryFunction : applicationTask
        MapReduceMain -> at.enfilo.def.prototype1.domain.LibraryFunction : mapTask
        MapReduceMain -> at.enfilo.def.prototype1.domain.LibraryFunction : reduceTask
    }
}

@enduml