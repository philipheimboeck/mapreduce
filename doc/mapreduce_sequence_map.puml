@startuml
activate JavaBaseLibraryFunction
JavaBaseLibraryFunction -> JavaBaseLibraryFunction : setInParameters(inParams : String[])
JavaBaseLibraryFunction -> MapJavaBaseLibraryFunction : run(parameters : List<String>)

activate MapJavaBaseLibraryFunction
MapJavaBaseLibraryFunction -> WordCountMap : runMap(parameters : List<String>)

activate WordCountMap
loop for every word in parameters
WordCountMap -> MapJavaBaseLibraryFunction : emit(word : String, 1 : int)
activate MapJavaBaseLibraryFunction
WordCountMap <-- MapJavaBaseLibraryFunction
deactivate MapJavaBaseLibraryFunction
end
MapJavaBaseLibraryFunction <-- WordCountMap
deactivate WordCountMap

MapJavaBaseLibraryFunction -> TuplePartitioner : partition(result : JsonArray)
activate TuplePartitioner

loop for every tuple in results
TuplePartitioner -> HashPartitioner : partition(tuple : JsonArray)
activate HashPartitioner
TuplePartitioner <-- HashPartitioner : partitions : List<JsonArray>
deactivate HashPartitioner
end

MapJavaBaseLibraryFunction <-- TuplePartitioner : partitions : List<JsonArray>
deactivate TuplePartitioner

loop for every partition
MapJavaBaseLibraryFunction -> JavaBaseLibraryFunction : writeJobResource(partitionKey, partition)
activate JavaBaseLibraryFunction
JavaBaseLibraryFunction --> MapJavaBaseLibraryFunction
deactivate JavaBaseLibraryFunction
end

MapJavaBaseLibraryFunction -> JavaBaseLibraryFunction : setResult(partitionKeys : List<String>)
activate JavaBaseLibraryFunction
MapJavaBaseLibraryFunction <-- JavaBaseLibraryFunction
deactivate JavaBaseLibraryFunction
JavaBaseLibraryFunction <-- MapJavaBaseLibraryFunction
deactivate MapJavaBaseLibraryFunction

deactivate JavaBaseLibraryFunction
@enduml