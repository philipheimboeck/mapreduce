@startuml

!include skin.puml
skinparam Sequence {
	Participant {
        FontSize        14
    }
}

[-> IJobDispatcher : submitJob(job : Job)
activate IJobDispatcher


IJobDispatcher -> NodeClientMap : execute(tasks : LinkedList<Task>)
activate NodeClientMap
IJobDispatcher -> NodeClientReduce : execute(tasks : LinkedList<Task>)
activate NodeClientReduce
hnote over NodeClientReduce : Wait for message

NodeClientMap -> DispatcherClient : runTaskSequence(task_sequence)
activate DispatcherClient
    loop for every task in tasks
        DispatcherClient ->] : invoke()
        ...
        DispatcherClient <--] : result : TaskResult
    end
    NodeClientMap <-- DispatcherClient : result : List<TaskResult>

deactivate DispatcherClient

' Notify
NodeClientMap -> IJobDispatcher : notifies(taskId : String, result : TaskResult)


activate IJobDispatcher
    IJobDispatcher -> NodeClientReduce : notifies()
    hnote over NodeClientReduce : Start working
deactivate IJobDispatcher

IJobDispatcher <-- NodeClientMap : result : List<TaskResult>
deactivate NodeClientMap

NodeClientReduce -> DispatcherClient : runTaskSequence(task_sequence)
activate DispatcherClient
    loop for every task in tasks
        DispatcherClient ->] : invoke()
        ...
        DispatcherClient <--] : result : TaskResult
    end
    NodeClientReduce <-- DispatcherClient : result : List<TaskResult>
deactivate DispatcherClient

' Notify
NodeClientReduce -> IJobDispatcher : notifies(taskId : String, result : TaskResult)
activate IJobDispatcher
deactivate IJobDispatcher


IJobDispatcher <-- NodeClientReduce : result : List<TaskResult>
deactivate NodeClientReduce

[<-- IJobDispatcher : result : JobResult
deactivate IJobDispatcher
@enduml